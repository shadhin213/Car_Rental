@model List<CarRentalManagementSystem.Models.VehicleViewModel>
@{
    ViewData["Title"] = "All Vehicles";
    var vehicles = ViewBag.Vehicles as List<CarRentalManagementSystem.Models.VehicleViewModel> ?? new List<CarRentalManagementSystem.Models.VehicleViewModel>();
}

<style>
    .vehicle-card {
        transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
        border: 1px solid #e0e0e0;
        border-radius: 10px;
        overflow: hidden;
    }
    
    .vehicle-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 25px rgba(0,0,0,0.15);
    }
    
    .vehicle-image {
        height: 200px;
        object-fit: cover;
        width: 100%;
    }
    
    .status-badge {
        position: absolute;
        top: 10px;
        right: 10px;
        z-index: 10;
    }
    
    .vehicle-details {
        padding: 1.5rem;
    }
    
    .feature-tag {
        display: inline-block;
        background: #f8f9fa;
        color: #495057;
        padding: 0.25rem 0.5rem;
        border-radius: 15px;
        font-size: 0.75rem;
        margin: 0.125rem;
    }
    
    .stats-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        border-radius: 15px;
        padding: 2rem;
        margin-bottom: 2rem;
    }
    
    .filter-section {
        background: #f8f9fa;
        border-radius: 10px;
        padding: 1.5rem;
        margin-bottom: 2rem;
    }
    
    .view-toggle {
        background: #e9ecef;
        border-radius: 25px;
        padding: 0.25rem;
    }
    
    .view-toggle .btn {
        border-radius: 20px;
        border: none;
        padding: 0.5rem 1rem;
    }
    
    .view-toggle .btn.active {
        background: #007bff;
        color: white;
    }
    
    .table-view {
        display: none;
    }
    
    .table-view.active {
        display: block;
    }
    
    .grid-view {
        display: none;
    }
    
    .grid-view.active {
        display: block;
    }
</style>

<div class="container-fluid">
    <!-- Header Section -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h1 class="h2 mb-0">
                        <i class="bi bi-car-front text-primary"></i>
                        Fleet Overview
                    </h1>
                    <p class="text-muted">Manage and view all vehicles in your fleet</p>
                </div>
                <div class="d-flex gap-2">
                    <button class="btn btn-outline-primary" onclick="window.history.back()">
                        <i class="bi bi-arrow-left"></i> Back
                    </button>
                    <button class="btn btn-success" onclick="exportVehicles()">
                        <i class="bi bi-download"></i> Export
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Statistics Cards -->
    <div class="row mb-4 row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-5 g-3">
        <div class="col">
            <div class="stats-card text-center">
                <h3 class="mb-0">@vehicles.Count</h3>
                <p class="mb-0">Total Vehicles</p>
            </div>
        </div>
        <div class="col">
            <div class="stats-card text-center" style="background: linear-gradient(135deg, #11998e 0%, #38ef7d 100%);">
                <h3 class="mb-0">@vehicles.Count(v => (v.Status ?? string.Empty).Equals("Available", System.StringComparison.OrdinalIgnoreCase))</h3>
                <p class="mb-0">Available</p>
            </div>
        </div>
        <div class="col">
            <div class="stats-card text-center" style="background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);">
                <h3 class="mb-0">@vehicles.Count(v => (v.Status ?? string.Empty).Equals("Rented", System.StringComparison.OrdinalIgnoreCase))</h3>
                <p class="mb-0">Rented</p>
            </div>
        </div>
        <div class="col">
            <div class="stats-card text-center" style="background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);">
                <h3 class="mb-0">@vehicles.Count(v => (v.Status ?? string.Empty).Equals("Maintenance", System.StringComparison.OrdinalIgnoreCase))</h3>
                <p class="mb-0">Maintenance</p>
            </div>
        </div>
        <div class="col">
            <div class="stats-card text-center" style="background: linear-gradient(135deg, #00c6ff 0%, #0072ff 100%);">
                <h3 class="mb-0">@vehicles.Count(v => ((v.Status ?? string.Empty).Replace("-", " ")).Equals("Out of Service", System.StringComparison.OrdinalIgnoreCase))</h3>
                <p class="mb-0">Out of Service</p>
            </div>
        </div>
    </div>

    <!-- Filter and View Toggle Section -->
    <div class="filter-section">
        <div class="row align-items-center">
            <div class="col-md-8">
                <div class="row">
                    <div class="col-md-3">
                        <label for="filterType" class="form-label">Vehicle Type</label>
                        <select class="form-select" id="filterType">
                            <option value="">All Types</option>
                            <option value="Motor Bike">Motor Bike</option>
                            <option value="CNG">CNG</option>
                            <option value="Private Car">Private Car</option>
                            <option value="Pickup">Pickup</option>
                            <option value="Truck">Truck</option>
                            <option value="Covered Van">Covered Van</option>
                        </select>
                    </div>
                    <div class="col-md-3">
                        <label for="filterStatus" class="form-label">Status</label>
                        <select class="form-select" id="filterStatus">
                            <option value="">All Status</option>
                            <option value="Available">Available</option>
                            <option value="Rented">Rented</option>
                            <option value="Maintenance">Maintenance</option>
                            <option value="Out of Service">Out of Service</option>
                        </select>
                    </div>
                    <div class="col-md-3">
                        <label for="filterModel" class="form-label">Model</label>
                        <input type="text" class="form-control" id="filterModel" placeholder="Search model...">
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">&nbsp;</label>
                        <button class="btn btn-primary w-100" onclick="applyFilters()">
                            <i class="bi bi-search"></i> Filter
                        </button>
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="view-toggle d-flex justify-content-end">
                    <button class="btn active" onclick="switchView('grid')">
                        <i class="bi bi-grid-3x3-gap"></i> Grid
                    </button>
                    <button class="btn" onclick="switchView('table')">
                        <i class="bi bi-list-ul"></i> Table
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Grid View -->
    <div id="gridView" class="grid-view active">
        <div class="row">
            @if (vehicles.Any())
            {
                @foreach (var vehicle in vehicles)
                {
                    <div class="col-lg-4 col-md-6 mb-4 vehicle-item" 
                         data-type="@vehicle.VehicleType" 
                         data-status="@vehicle.Status" 
                         data-model="@vehicle.Model.ToLower()">
                        <div class="card vehicle-card h-100">
                            <div class="position-relative">
                                <img src="@(string.IsNullOrEmpty(vehicle.ImageUrl) ? "/images/default-vehicle.jpg" : vehicle.ImageUrl)" 
                                     class="vehicle-image" 
                                     alt="@vehicle.Model"
                                     onerror="this.src='/images/default-vehicle.jpg'">
                                <span class="badge status-badge @(vehicle.Status == "Available" ? "bg-success" : vehicle.Status == "Rented" ? "bg-warning" : "bg-danger")">
                                    @vehicle.Status
                                </span>
                            </div>
                            <div class="vehicle-details">
                                <h5 class="card-title mb-2">@vehicle.Model</h5>
                                <p class="text-muted mb-2">@vehicle.VehicleType â€¢ @vehicle.Year</p>
                                
                                <div class="row mb-3">
                                    <div class="col-6">
                                        <small class="text-muted">Registration</small><br>
                                        <strong>@vehicle.RegistrationNumber</strong>
                                    </div>
                                    <div class="col-6">
                                        <small class="text-muted">Daily Rate</small><br>
                                        <strong class="text-success">$@vehicle.DailyRate</strong>
                                    </div>
                                </div>
                                
                                <div class="row mb-3">
                                    <div class="col-6">
                                        <small class="text-muted">Color</small><br>
                                        <strong>@vehicle.Color</strong>
                                    </div>
                                    <div class="col-6">
                                        <small class="text-muted">Engine</small><br>
                                        <strong>@vehicle.EngineCapacity</strong>
                                    </div>
                                </div>
                                
                                @if (vehicle.Features.Any())
                                {
                                    <div class="mb-3">
                                        @foreach (var feature in vehicle.Features.Take(3))
                                        {
                                            <span class="feature-tag">@feature</span>
                                        }
                                        @if (vehicle.Features.Count > 3)
                                        {
                                            <span class="feature-tag">+@(vehicle.Features.Count - 3) more</span>
                                        }
                                    </div>
                                }
                                
                                <div class="d-flex gap-2">
                                    <button class="btn btn-outline-primary btn-sm flex-fill" onclick="viewVehicleDetails(@vehicle.Id)">
                                        <i class="bi bi-eye"></i> View
                                    </button>
                                    <button class="btn btn-outline-warning btn-sm" onclick="openEditVehicleModal(@vehicle.Id)">
                                        <i class="bi bi-pencil"></i>
                                    </button>
                                    <button class="btn btn-outline-danger btn-sm" onclick="deleteVehicle(@vehicle.Id)">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="col-12 text-center py-5">
                    <i class="bi bi-car-front fa-3x text-muted mb-3"></i>
                    <h4 class="text-muted">No vehicles found</h4>
                    <p class="text-muted">Add your first vehicle to get started</p>
                    <button class="btn btn-primary" onclick="window.location.href='@Url.Action("FleetManagement", "Home")'">
                        <i class="bi bi-plus-circle"></i> Add Vehicle
                    </button>
                </div>
            }
        </div>
    </div>

    <!-- Table View -->
    <div id="tableView" class="table-view">
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead class="table-dark">
                    <tr>
                        <th>ID</th>
                        <th>Image</th>
                        <th>Vehicle Type</th>
                        <th>Model</th>
                        <th>Registration</th>
                        <th>Color</th>
                        <th>Engine</th>
                        <th>Daily Rate</th>
                        <th>Status</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var vehicle in vehicles)
                    {
                        <tr class="vehicle-item" 
                            data-type="@vehicle.VehicleType" 
                            data-status="@vehicle.Status" 
                            data-model="@vehicle.Model.ToLower()">
                            <td>@vehicle.Id</td>
                            <td>
                                <img src="@(string.IsNullOrEmpty(vehicle.ImageUrl) ? "/images/default-vehicle.jpg" : vehicle.ImageUrl)" 
                                     class="rounded" 
                                     style="width: 50px; height: 50px; object-fit: cover;"
                                     alt="@vehicle.Model"
                                     onerror="this.src='/images/default-vehicle.jpg'">
                            </td>
                            <td>
                                <span class="badge bg-primary">@vehicle.VehicleType</span>
                            </td>
                            <td><strong>@vehicle.Model</strong></td>
                            <td>@vehicle.RegistrationNumber</td>
                            <td>@vehicle.Color</td>
                            <td>@vehicle.EngineCapacity</td>
                            <td><strong class="text-success">$@vehicle.DailyRate</strong></td>
                            <td>
                                <span class="badge @(vehicle.Status == "Available" ? "bg-success" : vehicle.Status == "Rented" ? "bg-warning" : "bg-danger")">
                                    @vehicle.Status
                                </span>
                            </td>
                            <td>
                                <div class="btn-group btn-group-sm">
                                    <button class="btn btn-outline-primary" onclick="viewVehicleDetails(@vehicle.Id)">
                                        <i class="bi bi-eye"></i>
                                    </button>
                                    <button class="btn btn-outline-warning" onclick="openEditVehicleModal(@vehicle.Id)">
                                        <i class="bi bi-pencil"></i>
                                    </button>
                                    <button class="btn btn-outline-danger" onclick="deleteVehicle(@vehicle.Id)">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Vehicle Details Modal -->
<div class="modal fade" id="vehicleDetailsModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title">
                    <i class="bi bi-car-front"></i> Vehicle Details
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body" id="vehicleDetailsContent">
                <!-- Content will be loaded dynamically -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-warning" onclick="editVehicleFromModal()">
                    <i class="bi bi-pencil"></i> Edit
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Edit Vehicle Modal (same structure as FleetManagement's "Edit Vehicle Information") -->
<div class="modal fade" id="editVehicleModal" tabindex="-1" aria-labelledby="editVehicleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-warning text-dark">
                <h5 class="modal-title" id="editVehicleModalLabel">
                    <i class="bi bi-pencil-square"></i> Edit Vehicle Information
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="editVehicleFormVAV">
                    <input type="hidden" id="vav_editVehicleId" name="id">
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="vav_editVehicleType" class="form-label">Vehicle Type *</label>
                            <select class="form-select" id="vav_editVehicleType" name="vehicleType" required>
                                <option value="">Select Vehicle Type</option>
                                <option value="motor bike">Motor Bike</option>
                                <option value="cng">CNG</option>
                                <option value="private car">Private Car</option>
                                <option value="pickup">Pickup</option>
                                <option value="truck">Truck</option>
                                <option value="covered van">Covered Van</option>
                            </select>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="vav_editModel" class="form-label">Model *</label>
                            <input type="text" class="form-control" id="vav_editModel" name="model" required>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="vav_editYear" class="form-label">Year *</label>
                            <input type="number" class="form-control" id="vav_editYear" name="year" min="2000" max="2025" required>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="vav_editRegistrationNumber" class="form-label">Registration Number *</label>
                            <input type="text" class="form-control" id="vav_editRegistrationNumber" name="registrationNumber" required>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="vav_editChassisNumber" class="form-label">Chassis Number *</label>
                            <input type="text" class="form-control" id="vav_editChassisNumber" name="chassisNumber" required>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="vav_editColor" class="form-label">Color *</label>
                            <input type="text" class="form-control" id="vav_editColor" name="color" required>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="vav_editEngineCapacity" class="form-label">Engine Capacity (CC) *</label>
                            <input type="text" class="form-control" id="vav_editEngineCapacity" name="engineCapacity" required>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="vav_editFuelType" class="form-label">Fuel Type *</label>
                            <select class="form-select" id="vav_editFuelType" name="fuelType" required>
                                <option value="">Select Fuel Type</option>
                                <option value="petrol">Petrol</option>
                                <option value="diesel">Diesel</option>
                                <option value="electric">Electric</option>
                                <option value="hybrid">Hybrid</option>
                                <option value="cng">CNG</option>
                            </select>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="vav_editDailyRate" class="form-label">Daily Rate ($) *</label>
                            <input type="number" class="form-control" id="vav_editDailyRate" name="dailyRate" min="10" step="0.01" required>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="vav_editSeats" class="form-label">Number of Seats</label>
                            <input type="number" class="form-control" id="vav_editSeats" name="seats" min="1" max="50">
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="vav_editStatus" class="form-label">Status *</label>
                            <select class="form-select" id="vav_editStatus" name="status" required>
                                <option value="available">Available</option>
                                <option value="rented">Rented</option>
                                <option value="maintenance">Under Maintenance</option>
                                <option value="out-of-service">Out of Service</option>
                            </select>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="vav_editVehicleImage" class="form-label">Update Image</label>
                            <input type="file" class="form-control" id="vav_editVehicleImage" name="vehicleImage" accept="image/*">
                            <small class="form-text text-muted">Leave empty to keep current image</small>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label for="vav_editDescription" class="form-label">Description</label>
                        <textarea class="form-control" id="vav_editDescription" name="description" rows="3"></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-warning" onclick="submitEditVehicleFromVAV()">
                    <i class="bi bi-pencil-square"></i> Update Vehicle
                </button>
            </div>
        </div>
    </div>
    </div>

<script>
let currentVehicleId = null;

function switchView(view) {
    const gridView = document.getElementById('gridView');
    const tableView = document.getElementById('tableView');
    const buttons = document.querySelectorAll('.view-toggle .btn');
    
    buttons.forEach(btn => btn.classList.remove('active'));
    event.target.classList.add('active');
    
    if (view === 'grid') {
        gridView.classList.add('active');
        tableView.classList.remove('active');
    } else {
        gridView.classList.remove('active');
        tableView.classList.add('active');
    }
}

function applyFilters() {
    const typeFilter = document.getElementById('filterType').value.toLowerCase();
    const statusFilter = document.getElementById('filterStatus').value.toLowerCase();
    const modelFilter = document.getElementById('filterModel').value.toLowerCase();
    
    const vehicles = document.querySelectorAll('.vehicle-item');
    
    vehicles.forEach(vehicle => {
        const type = vehicle.dataset.type.toLowerCase();
        const status = vehicle.dataset.status.toLowerCase();
        const model = vehicle.dataset.model;
        
        const typeMatch = !typeFilter || type.includes(typeFilter);
        const statusMatch = !statusFilter || status.includes(statusFilter);
        const modelMatch = !modelFilter || model.includes(modelFilter);
        
        if (typeMatch && statusMatch && modelMatch) {
            vehicle.style.display = '';
        } else {
            vehicle.style.display = 'none';
        }
    });
}

function viewVehicleDetails(vehicleId) {
    currentVehicleId = vehicleId;
    
    // Find vehicle data from the current page
    const vehicles = @Html.Raw(Json.Serialize(vehicles));
    const vehicle = vehicles.find(v => v.id === vehicleId);
    
    if (vehicle) {
        const content = `
            <div class="row">
                <div class="col-md-6">
                    <img src="${vehicle.imageUrl || '/images/default-vehicle.jpg'}" 
                         class="img-fluid rounded" 
                         alt="${vehicle.model}"
                         onerror="this.src='/images/default-vehicle.jpg'">
                </div>
                <div class="col-md-6">
                    <h4>${vehicle.model}</h4>
                    <p class="text-muted">${vehicle.vehicleType} â€¢ ${vehicle.year}</p>
                    
                    <div class="row mb-3">
                        <div class="col-6">
                            <strong>Registration:</strong><br>
                            ${vehicle.registrationNumber}
                        </div>
                        <div class="col-6">
                            <strong>Chassis:</strong><br>
                            ${vehicle.chassisNumber}
                        </div>
                    </div>
                    
                    <div class="row mb-3">
                        <div class="col-6">
                            <strong>Color:</strong><br>
                            ${vehicle.color}
                        </div>
                        <div class="col-6">
                            <strong>Engine:</strong><br>
                            ${vehicle.engineCapacity}
                        </div>
                    </div>
                    
                    <div class="row mb-3">
                        <div class="col-6">
                            <strong>Fuel Type:</strong><br>
                            ${vehicle.fuelType}
                        </div>
                        <div class="col-6">
                            <strong>Seats:</strong><br>
                            ${vehicle.seats}
                        </div>
                    </div>
                    
                    <div class="row mb-3">
                        <div class="col-6">
                            <strong>Daily Rate:</strong><br>
                            <span class="text-success fw-bold">$${vehicle.dailyRate}</span>
                        </div>
                        <div class="col-6">
                            <strong>Status:</strong><br>
                            <span class="badge ${vehicle.status === 'Available' ? 'bg-success' : vehicle.status === 'Rented' ? 'bg-warning' : 'bg-danger'}">
                                ${vehicle.status}
                            </span>
                        </div>
                    </div>
                    
                    ${vehicle.description ? `
                    <div class="mb-3">
                        <strong>Description:</strong><br>
                        ${vehicle.description}
                    </div>
                    ` : ''}
                    
                    ${vehicle.features && vehicle.features.length > 0 ? `
                    <div class="mb-3">
                        <strong>Features:</strong><br>
                        ${vehicle.features.map(feature => `<span class="badge bg-light text-dark me-1">${feature}</span>`).join('')}
                    </div>
                    ` : ''}
                </div>
            </div>
        `;
        
        document.getElementById('vehicleDetailsContent').innerHTML = content;
        const modal = new bootstrap.Modal(document.getElementById('vehicleDetailsModal'));
        modal.show();
    }
}

async function openEditVehicleModal(vehicleId) {
    try {
        const vehicles = @Html.Raw(Json.Serialize(vehicles));
        const v = vehicles.find(x => x.id === vehicleId);
        if (!v) return;

        // Populate form
        document.getElementById('vav_editVehicleId').value = v.id;
        document.getElementById('vav_editVehicleType').value = (v.vehicleType || '').toLowerCase();
        document.getElementById('vav_editModel').value = v.model || '';
        document.getElementById('vav_editYear').value = v.year || '';
        document.getElementById('vav_editRegistrationNumber').value = v.registrationNumber || '';
        document.getElementById('vav_editChassisNumber').value = v.chassisNumber || '';
        document.getElementById('vav_editColor').value = v.color || '';
        document.getElementById('vav_editEngineCapacity').value = v.engineCapacity || '';
        document.getElementById('vav_editFuelType').value = (v.fuelType || '').toLowerCase();
        document.getElementById('vav_editDailyRate').value = v.dailyRate || '';
        document.getElementById('vav_editSeats').value = v.seats || '';
        document.getElementById('vav_editStatus').value = (v.status || '').toLowerCase().replace(' ', '-');
        document.getElementById('vav_editDescription').value = v.description || '';

        // Show modal
        const modal = new bootstrap.Modal(document.getElementById('editVehicleModal'));
        modal.show();
    } catch (e) {
        console.error(e);
        alert('Failed to open edit modal');
    }
}

function submitEditVehicleFromVAV() {
    const form = document.getElementById('editVehicleFormVAV');
    if (!form.checkValidity()) { form.reportValidity(); return; }

    const fd = new FormData(form);
    const payload = Object.fromEntries(fd);

    // Normalize status to display values used across the app
    const statusMap = {
        'available': 'Available',
        'rented': 'Rented',
        'maintenance': 'Maintenance',
        'out-of-service': 'Out of Service'
    };
    const normalizedStatus = statusMap[(payload.status || '').toLowerCase()] || payload.status;

    // map types
    const updateData = {
        id: parseInt(payload.id),
        vehicleType: payload.vehicleType,
        model: payload.model,
        year: parseInt(payload.year),
        registrationNumber: payload.registrationNumber,
        chassisNumber: payload.chassisNumber,
        color: payload.color,
        engineCapacity: payload.engineCapacity,
        fuelType: payload.fuelType,
        dailyRate: parseFloat(payload.dailyRate),
        seats: parseInt(payload.seats || '0'),
        status: normalizedStatus,
        description: payload.description || '',
        features: []
    };

    const imageFile = document.getElementById('vav_editVehicleImage').files[0];
    if (imageFile) {
        const imgFd = new FormData();
        imgFd.append('file', imageFile);
        fetch('@Url.Action("UploadVehicleImage", "Home")', { method: 'POST', body: imgFd })
            .then(r => r.json())
            .then(j => {
                if (j.success) {
                    updateData.imageUrl = j.url;
                    return doUpdate(updateData);
                }
                throw new Error('Image upload failed');
            })
            .catch(err => { console.error(err); alert('Error uploading image'); });
    } else {
        doUpdate(updateData);
    }
}

function doUpdate(updateData) {
    fetch('@Url.Action("UpdateVehicle", "Home")', {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(updateData)
    })
    .then(r => r.json())
    .then(d => {
        if (d.success) {
            alert('Vehicle updated successfully!');
            const modal = bootstrap.Modal.getInstance(document.getElementById('editVehicleModal'));
            if (modal) modal.hide();
            window.location.reload();
        } else {
            alert('Update failed: ' + (d.message || 'Unknown error'));
        }
    })
    .catch(err => { console.error(err); alert('Error updating vehicle'); });
}

function editVehicleFromModal() {
    if (currentVehicleId) {
        editVehicle(currentVehicleId);
    }
}

function deleteVehicle(vehicleId) {
    if (!confirm('Are you sure you want to delete this vehicle? This action cannot be undone.')) {
        return;
    }
    fetch('@Url.Action("DeleteVehicle", "Home")/' + vehicleId, {
        method: 'DELETE',
        headers: {
            'Accept': 'application/json'
        }
    })
    .then(res => res.json())
    .then(data => {
        if (data && data.success) {
            alert('Vehicle deleted successfully!');
            location.reload();
        } else {
            alert('Failed to delete vehicle: ' + (data && data.message ? data.message : 'Unknown error'));
        }
    })
    .catch(err => {
        console.error(err);
        alert('Error deleting vehicle.');
    });
}

function exportVehicles() {
    // Here you would implement export functionality
    alert('Vehicle data exported successfully!');
}

// Auto-apply filters when inputs change
document.getElementById('filterType').addEventListener('change', applyFilters);
document.getElementById('filterStatus').addEventListener('change', applyFilters);
document.getElementById('filterModel').addEventListener('input', applyFilters);
</script>
